{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\n\ntype Matches = (number | undefined)[];\n\nlet statusBar: vscode.StatusBarItem;\n\nlet searchInput: string = '';\nlet isSearchModeActive: boolean = false;\nlet searchContext: {\n  searchTerm: string;\n  matches: Matches;\n  currentIndex: number;\n} | null;\n\nfunction setStatusBarMessage(msg: string) {\n  statusBar.text = `${isSearchModeActive ? '\uD83D\uDD35' : ''} ${msg}`;\n}\n\ntype ExtensionSetting = 'showTooltipIfNoMatches' | 'caseSensitiveSearch';\n\nfunction readConfiguration(settingKey: ExtensionSetting) {\n  const extensionConfig = vscode.workspace.getConfiguration('findAndJump');\n  const configValue = extensionConfig.get<string>(settingKey);\n\n  if (configValue === undefined) {\n    const msg = `Missing config value for ${settingKey}`;\n    showTooltipMessage(msg, 'error');\n    throw new Error(msg);\n  }\n\n  return configValue;\n}\n\nconst searchDecorationType = vscode.window.createTextEditorDecorationType({\n  // TODO Pick custom color\n  backgroundColor: { id: 'myExtension.searchHighlight' },\n});\n\nfunction showTooltipMessage(\n  msg: string,\n  type: 'default' | 'error' = 'default',\n) {\n  switch (type) {\n    case 'default': {\n      vscode.window.showInformationMessage(msg);\n      break;\n    }\n    case 'error': {\n      vscode.window.showErrorMessage(msg);\n      break;\n    }\n    default: {\n      throw new Error(`Unkown tooltip type: ${type}`);\n    }\n  }\n}\n\nfunction setInitialSearchModeMessage() {\n  setStatusBarMessage('Search mode activate');\n}\n\nfunction setSearchModeStatus(isActiveNew: boolean) {\n  isSearchModeActive = isActiveNew;\n  vscode.commands.executeCommand(\n    'setContext',\n    'findAndJump.isSearchModeActive',\n    isActiveNew,\n  );\n}\n\nfunction initializeStatusBar() {\n  statusBar = vscode.window.createStatusBarItem(\n    vscode.StatusBarAlignment.Left,\n    100,\n  );\n  statusBar.command = 'findAndJump.exitSearchMode';\n  statusBar.tooltip = 'Click to exit search mode.';\n  statusBar.show();\n\n  setStatusBarMessage('Extension activated');\n}\n\nfunction createRange({\n  matchIndex,\n  searchTerm,\n  document,\n}: {\n  matchIndex: number | undefined;\n  searchTerm: string;\n  document: vscode.TextDocument;\n}) {\n  if (typeof matchIndex === 'undefined') {\n    showTooltipMessage(\n      'Something went wrong. See logs for more information. Error: Missing match index',\n    );\n    throw new Error('Missing match index');\n  }\n\n  const startPos = document.positionAt(matchIndex);\n  const endPos = document.positionAt(matchIndex + searchTerm.length);\n  const range = new vscode.Range(startPos, endPos);\n\n  return range;\n}\n\n/** Executed on activation. */\nexport function activate(context: vscode.ExtensionContext) {\n  console.debug('Activated');\n\n  initializeStatusBar();\n\n  const disposableCommandActivateSearchMode = vscode.commands.registerCommand(\n    'findAndJump.activateSearchMode',\n    () => {\n      console.debug('Command: activateSearchMode');\n\n      if (!isSearchModeActive) {\n        setSearchModeStatus(true);\n        setInitialSearchModeMessage();\n      }\n    },\n  );\n\n  const disposableCommandType = vscode.commands.registerCommand(\n    'type',\n    (event) => {\n      console.debug('Command: type');\n\n      if (isSearchModeActive) {\n        searchInput += event.text;\n        executeSearch(searchInput);\n      } else {\n        // Fall back to the default type command\n        vscode.commands.executeCommand('default:type', event);\n      }\n    },\n  );\n\n  const disposableCommandCaptureBackspace = vscode.commands.registerCommand(\n    'findAndJump.captureBackspace',\n    () => {\n      console.debug('Command: captureBackspace');\n\n      if (isSearchModeActive) {\n        // Handle backspace key: remove the last character\n        if (searchInput.length > 0) {\n          searchInput = searchInput.slice(0, -1);\n        }\n\n        // Only search if the input is at least 1 character\n        if (searchInput.length > 0) {\n          executeSearch(searchInput);\n        } else {\n          setInitialSearchModeMessage();\n        }\n      }\n    },\n  );\n\n  const disposableCommandExitSearchMode = vscode.commands.registerCommand(\n    'findAndJump.exitSearchMode',\n    () => {\n      console.debug('Command: exitSearchMode');\n\n      exitSearchMode();\n    },\n  );\n\n  // Handle TAB keypress to cycle through matches\n  const dispoCycleThrough = vscode.commands.registerCommand(\n    'findAndJump.cycleThroughMatches',\n    () => {\n      console.debug('Command: cycleThroughMatches');\n\n      if (!searchContext) {\n        throw new Error('Missing search context');\n      }\n\n      // Determine index with modulo to jump to the first match after the last match\n      const newCurrentIndex =\n        (searchContext.currentIndex + 1) % searchContext.matches.length;\n      searchContext.currentIndex = newCurrentIndex;\n\n      const matchIndex = searchContext.matches.at(searchContext.currentIndex);\n\n      const activeTextEditor = vscode.window.activeTextEditor;\n      if (!activeTextEditor) {\n        throw new Error('No active text editor');\n      } else {\n        const range = createRange({\n          matchIndex,\n          searchTerm: searchContext.searchTerm,\n          document: activeTextEditor.document,\n        });\n\n        // Select the search result\n        activeTextEditor.selection = new vscode.Selection(\n          range.start,\n          range.end,\n        );\n        // Scroll to search result\n        activeTextEditor.revealRange(\n          range,\n          vscode.TextEditorRevealType.InCenter,\n        );\n      }\n    },\n  );\n\n  context.subscriptions.push(\n    statusBar,\n    disposableCommandActivateSearchMode,\n    disposableCommandType,\n    dispoCycleThrough,\n    disposableCommandCaptureBackspace,\n    disposableCommandExitSearchMode,\n  );\n}\n\nfunction executeSearch(searchTerm: string) {\n  console.debug('######## Executing search for: ', searchTerm);\n\n  const activeTextEditor = vscode.window.activeTextEditor;\n  if (!activeTextEditor) {\n    showTooltipMessage('No active text editor.', 'error');\n    return;\n  }\n\n  const document = activeTextEditor.document;\n  const documentText = document.getText();\n  const isCaseSensitiveSearch = Boolean(\n    readConfiguration('caseSensitiveSearch'),\n  );\n  const flags = isCaseSensitiveSearch === true ? 'g' : 'gi';\n  const regex = new RegExp(searchTerm, flags);\n\n  const matches: Matches = Array.from(\n    documentText.matchAll(regex),\n    (match) => match.index,\n  );\n  const noOfMatches = matches.length;\n\n  const searchMsg = `Searching for: '${searchTerm}'`;\n\n  if (noOfMatches === 0) {\n    if (searchContext?.searchTerm) {\n      searchContext.searchTerm = searchTerm;\n    }\n\n    setStatusBarMessage(`${searchMsg} | No matches`);\n\n    if (!!readConfiguration('showTooltipIfNoMatches')) {\n      showTooltipMessage(`No matches found for ${searchTerm}.`);\n    }\n    return;\n  } else {\n    setStatusBarMessage(\n      `${searchMsg} | ${noOfMatches} match${\n        noOfMatches === 1 ? '' : 'es | Press TAB to cycle through'\n      }`,\n    );\n  }\n\n  // Apply decorations to the matches\n  let matchDecorations: vscode.DecorationOptions[] = matches\n    .filter((matchIndex) => typeof matchIndex === 'number')\n    .map((matchIndex) => {\n      return {\n        range: createRange({\n          matchIndex,\n          searchTerm,\n          document: activeTextEditor.document,\n        }),\n      };\n    });\n\n  // Initially set the selection to the first match\n  const firstMatchDecoration = matchDecorations.at(0);\n  if (!!firstMatchDecoration) {\n    activeTextEditor.selection = new vscode.Selection(\n      firstMatchDecoration.range.start,\n      firstMatchDecoration.range.end,\n    );\n\n    activeTextEditor.setDecorations(searchDecorationType, matchDecorations);\n  }\n\n  // Store the matches and search term in a context for navigation\n  searchContext = { searchTerm, matches, currentIndex: 0 };\n\n  console.debug('######## End of executing search');\n}\n\nfunction exitSearchMode() {\n  setSearchModeStatus(false);\n  resetState();\n\n  const msg = 'Exited search mode';\n  console.debug(msg);\n  setStatusBarMessage(msg);\n}\n\nfunction resetState() {\n  searchInput = '';\n  searchContext = null;\n}\n\n/** Executed on deactivation. */\nexport function deactivate() {\n  console.debug('Deactivated');\n}\n"],
  "mappings": "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",
  "names": []
}
